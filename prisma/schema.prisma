generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id         Int      @id @default(autoincrement())
  address    String   @unique
  email      String   @unique
  privateKey String?
  isDelete   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profile    Profile?
  storys     Story[]

  Story Story[] @relation("owner")
  @@index([address, email])
}

model Profile {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  nickname       String
  profileUrl     String?
  avatarSvg      String?
  defaultProfile Boolean  @default(true)
  gender         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Signature {
  id         Int      @id @default(autoincrement())
  userId     Int?
  signature  String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Story {
  id              Int      @id @default(autoincrement())
  userId          Int
  mediaId         Int
  name            String   @unique
  description     String
  backgroundColor String?
  externalUrl     String?
  private         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDelete        Boolean  @default(false)
  media           Media    @relation(fields: [mediaId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  owner           User     @relation(name: "owner", fields: [userId], references: [id])

  storyTags StoryTags[]
  @@index([name])
}

model Media {
  id           Int      @id @default(autoincrement())
  originUrl    String
  contentUrl   String?
  thumbnailUrl String?
  type         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  stories      Story[]
}

model StoryTags {
  id      Int    @id @default(autoincrement())
  story   Story? @relation(fields: [storyId], references: [id])
  tag     Tag?   @relation(fields: [tagId], references: [id])
  storyId Int?
  tagId   Int?
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  storyTags StoryTags[]
}
