generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Device {
  id       Int     @id @default(autoincrement())
  os       String
  deviceId String
  token    String?
  user     User?   @relation(fields: [userId], references: [id])
  userId   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique // 유저 이메일
  password  String // 비밀번로
  isDelete  Boolean  @default(false) // 삭제 여부
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile? // 유저 프로필 관계
  account   Account? // 유저 지갑 관계
  stories   Story[] // 유저 story 관계 (생성한 유저)
  devices   Device[] // 유저 디바이스 관계


  froms         History[]      @relation("from") // 유저 거래 및 발행 내역
  tos           History[]      @relation("to") // 유저 거래 및 발행 내역
  owners        Story[]        @relation("owner") // 내 스토리 관계 (생성 및 거래)
  likes         Like[] // 유저 좋아요 관계
  notifications Notification[] // 유저 알림 관계
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String // 타입
  title     String // 제목
  message   String // 메시지
  link      String? // 링크
  isRead    Boolean  @default(false) // 읽음 여부
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Profile {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  nickname        String // 유저 닉네임
  profileUrl      String? // 유저 프로필 이미지
  avatarSvg       String? // 아바타 svg
  defaultProfile  Boolean  @default(true) // 기본 프로필 여부
  gender          String // 성별
  bio             String? // 간단한 소개
  canNotification Boolean  @default(false) // 알림 설정 값
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id]) // 유저 관계
}

model Account {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique // 유저 아이디
  address    String   @unique // 지갑 주소
  privateKey String   @unique // 지갑 개인키
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id]) // 유저 관계
}

model History {
  id              Int      @id @default(autoincrement())
  status          String // 거래 상태
  toId            Int? // 받는 사람 아이디
  fromId          Int? // 보내는 사람 아이디
  storyId         Int // 스토리 아이디
  tokenId         Int // 토큰 아이디
  type            String // 거래 종류
  toHash          String // 받는 사람 해시
  fromHash        String // 보내는 사람 해시
  blockHash       String // 블록 해시
  blockNumber     String // 블록 넘버
  senderTxHash    String // 보내는 사람 트랜잭션 해시
  transactionHash String // 트랜잭션 해시
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  story Story @relation(fields: [storyId], references: [id]) // 스토리 관계
  to    User? @relation(name: "to", fields: [toId], references: [id]) // 받는 사람 관계
  from  User? @relation(name: "from", fields: [fromId], references: [id]) // 보내는 사람 관계
}

model Story {
  id              Int      @id @default(autoincrement())
  userId          Int //  유저 아이디
  ownerId         Int // 소유권 아이디
  mediaId         Int // 미디어 아이디
  nftId           Int? // nft 아이디
  name            String // 스토리 이름
  description     String // 스토리 설명
  backgroundColor String? // 배경 색상
  externalUrl     String? // 외부 주소
  views           Int      @default(0) // 조회수
  private         Boolean  @default(false) // 공개 여부
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDelete        Boolean  @default(false) // 삭제 여부
  media           Media    @relation(fields: [mediaId], references: [id]) // 미디어
  user            User     @relation(fields: [userId], references: [id]) // 유저
  owner           User     @relation(name: "owner", fields: [ownerId], references: [id]) // 소유권

  nft NFT? // nft

  storyTags StoryTags[] // 스토리 태그 관계
  histories History[] // 스토리 거래 및 발행 내역
  likes     Like[] // 스토리 좋아요 관계
}

model NFT {
  id        Int      @id @default(autoincrement())
  tokenId   Int      @unique // 토큰 아이디
  storyId   Int      @unique // 스토리 아이디
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  story     Story    @relation(fields: [storyId], references: [id]) // 스토리
}

model Media {
  id           Int      @id @default(autoincrement())
  originUrl    String // 원본 이미지
  contentUrl   String? // 컨텐츠 이미지
  thumbnailUrl String? // 썸네일 이미지
  type         String // 이미지 타입
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  stories      Story[] // 스토리 관계
}

model StoryTags {
  id      Int    @id @default(autoincrement())
  story   Story? @relation(fields: [storyId], references: [id]) // 스토리
  tag     Tag?   @relation(fields: [tagId], references: [id]) // 태그
  storyId Int? // 스토리 아이디
  tagId   Int? // 태그 아이디
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String      @unique // 태그 이름
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  storyTags StoryTags[] // 스토리 태그 관계

  @@index([name])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique // 유저 아이디
  storyId   Int      @unique // 스토리 아이디
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id]) // 유저
  story Story @relation(fields: [storyId], references: [id]) // 스토리
}
