// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email String @unique // 이메일, max: 255

  username String // 유저명, max: 255

  passwordHash String // 비밀번호

  profileUrl String? // 유저 프로필 url, max: 1000

  lastActiveAt DateTime? // 마지막 접속 시간

  lastActiveIp String? // 마지막 접속 아이피

  createdAt DateTime @default(now()) // 생성일

  updatedAt DateTime @updatedAt // 업데이트일

  deletedAt DateTime? // 삭제일 

  walletId Int

  authentications UserAuthentication[]

  items Item[]

  wallet UserWallet @relation(fields: [walletId], references: [id])
}

model UserAuthentication {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) // 생성일

  updatedAt DateTime @updatedAt // 업데이트일

  deletedAt DateTime? // 삭제일 

  user   User? @relation(fields: [userId], references: [id]) // 로그인 유저 정보
  userId Int? // 로그인 유저 아이디
}

model UserWallet {
  id Int @id @default(autoincrement())

  address String @unique // 지갑주소

  createdAt DateTime @default(now()) // 생성일

  updatedAt DateTime @updatedAt // 업데이트일

  deletedAt DateTime? // 삭제일 

  user User[]
}

model Item {
  id Int @id @default(autoincrement())

  title String // 타이틀 max 100

  description String // 설명 max 1000

  price Float // 가격

  beginDate DateTime // 판매 시작일

  endDate DateTime // 판매 종료일

  isPublic Boolean @default(false) // 공개여부

  backgroundColor String? // 배경색

  externalSite String? // 외부주소

  status String @default("pending") // 판매 상태 ("sale", "canceled", "expired", "pending", "trade")

  createdAt DateTime @default(now()) // 생성일

  updatedAt DateTime @updatedAt // 업데이트일

  deletedAt DateTime? // 삭제일 

  fileId Int // 파일 아이디

  userId Int //  유저 아이디

  nftId Int? // nft 아아디

  user User @relation(fields: [userId], references: [id]) // 유저

  file File @relation(fields: [fileId], references: [id]) // 파일

  nft NFT? @relation(fields: [nftId], references: [id])

  itemsTags ItemsTags[]
}

model NFT {
  id Int @id @default(autoincrement())

  tokenId String @unique // 토큰 아이디

  assetFileName String? // 애셋명

  assetContentType String? // 애셋 타입

  assetsUrl String? // https://docs.klaytnapi.com/tutorial/metadata-api/meta-api, https://docs.klaytnapi.com/tutorial

  createdAt DateTime @default(now()) // 생성일

  updatedAt DateTime @updatedAt // 업데이트일

  deletedAt DateTime? // 삭제일 

  items Item[]
}

model ItemsTags {
  id Int @id @default(autoincrement())

  item Item? @relation(fields: [itemId], references: [id]) // 스토리

  tag Tag? @relation(fields: [tagId], references: [id]) // 태그

  itemId Int? // 아이템 아이디

  tagId Int? // 태그 아이디
}

model Tag {
  id Int @id @default(autoincrement())

  name String @unique

  createdAt DateTime @default(now()) // 생성일

  updatedAt DateTime @updatedAt // 업데이트일

  deletedAt DateTime? // 삭제일 

  itemId Int?

  itemsTags ItemsTags[]

  @@index([name])
}

model File {
  id Int @id @default(autoincrement())

  publicId String @unique // cloudinary 업로드 아이디

  version Int // 버전 정보

  signature String // 서명정보

  foramt String // 파일 형식

  resourceType String // 리소스에 대한 타입

  url String // http 주소

  secureUrl String // https 주소

  uploadType String // PROFILE | NFT

  mediaType String // VIDEO | IMAGE

  createdAt DateTime @default(now()) // 생성일

  updatedAt DateTime @updatedAt // 업데이트일

  deletedAt DateTime? // 삭제일 

  items Item[]
}
