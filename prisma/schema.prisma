generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique // 유저 이메일
  password  String // 비밀번로
  isDelete  Boolean  @default(false) // 삭제 여부
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile? // 유저 프로필 관계
  account   Account? // 유저 지갑 관계
  stories   Story[] // 유저 story 관계 (생성한 유저)


  froms  History[] @relation("from") // 유저 거래 및 발행 내역
  tos    History[] @relation("to") // 유저 거래 및 발행 내역
  owners Story[]   @relation("owner") // 내 스토리 관계 (생성 및 거래)
  likes  Like[] // 유저 좋아요 관계
}

model Signature {
  id          Int      @id @default(autoincrement())
  signature   String // 서명 데이터
  messageHash String // 서명 데이터 hash값
  messageData String? // 서명 데이터 정보
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Profile {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  nickname       String
  profileUrl     String?
  avatarSvg      String?
  defaultProfile Boolean  @default(true)
  gender         String
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Account {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  address    String   @unique
  privateKey String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model History {
  id              Int      @id @default(autoincrement())
  status          String
  toId            Int?
  fromId          Int?
  storyId         Int
  tokenId         Int
  type            String
  toHash          String
  fromHash        String
  blockHash       String
  blockNumber     String
  senderTxHash    String
  transactionHash String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  story Story @relation(fields: [storyId], references: [id])
  to    User? @relation(name: "to", fields: [toId], references: [id])
  from  User? @relation(name: "from", fields: [fromId], references: [id])
}

model Story {
  id              Int      @id @default(autoincrement())
  userId          Int
  ownerId         Int
  mediaId         Int
  nftId           Int?
  name            String
  description     String
  backgroundColor String?
  externalUrl     String?
  views           Int      @default(0)
  private         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDelete        Boolean  @default(false)
  media           Media    @relation(fields: [mediaId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  owner           User     @relation(name: "owner", fields: [ownerId], references: [id])

  storyTags StoryTags[]
  histories History[]
  likes     Like[]
  nft       NFT?        @relation(fields: [nftId], references: [id])
}

model NFT {
  id        Int      @id @default(autoincrement())
  tokenId   Int      @unique
  storyId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  story     Story[]
}

model Media {
  id           Int      @id @default(autoincrement())
  originUrl    String
  contentUrl   String?
  thumbnailUrl String?
  type         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  stories      Story[]
}

model StoryTags {
  id      Int    @id @default(autoincrement())
  story   Story? @relation(fields: [storyId], references: [id])
  tag     Tag?   @relation(fields: [tagId], references: [id])
  storyId Int?
  tagId   Int?
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  storyTags StoryTags[]

  @@index([name])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  storyId   Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  story Story @relation(fields: [storyId], references: [id])
}
